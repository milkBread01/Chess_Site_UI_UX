:root {
    --board-size: min(90vw, 90vh, 800px);
    --square-size: calc((var(--board-size) - 2rem) / 11.6);
    --gap: 0.4rem;
    --label-size: clamp(0.8rem, 2vw, 1.1rem);
    --light: #f5f1e6;
    --dark: #d1b792;
    --blue: #5b93ee;
    --green: #3fcf497d;
    --red: #ef4444;
    --gold: #e3ff42;
    --purple: #a969f1;
    --label-color: #333;
    --boardBackground: #B9D9EB;
    --pageBackground: #353E43;
    --border: 0.2rem;
    --radius: 1rem;
    --shadow: 0 0.5rem 1.25rem rgba(0,0,0,0.12);
    --peripheralsMenu: #628699ba;
}
/* 
    The calc() CSS function lets you perform calculations when specifying CSS property values. It can be used with <length>, <frequency>, <angle>, <time>, <percentage>, <number>, <integer>, and <color-function> values.    

    The grid-template-columns CSS property defines the line names and track sizing functions of the grid columns.

    The repeat() CSS function represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.

    The min() CSS function lets you set the smallest (most negative) value from a list of comma-separated expressions as the value of a CSS property value. The min() function can be used anywhere a <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> is allowed.

    The grid-column CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
        grid-column: <start-line> / <end-line>;
    
    The clamp() CSS function clamps a value within a range of values between a defined minimum bound and a maximum bound. 
    Takes 3 parameters: 
        a minimum value, a preferred value, and a maximum allowed value.

    The scale() CSS function defines a transformation that resizes an element on the 2D plane. Because the amount of scaling is defined by a vector [sx, sy], it can resize the horizontal and vertical dimensions at different scales. Its result is a <transform-function> data type.
        <width, height>
        transform: scale<1.5, 1.5>
        transform: scale<-1.5, 1.5> to mirror

*/
.board-wrapper {
    width: auto;
    height: auto;
    display: grid;
    gap: calc(var(--gap) / 2);
    grid-template-columns: calc(var(--square-size) * 0.8) repeat(8, var(--square-size)) calc(var(--square-size) * 0.8);
    grid-template-rows: calc(var(--square-size) * 0.8) repeat(8, var(--square-size)) calc(var(--square-size) * 0.8);
    padding: var(--gap);
    background: var(--boardBackground);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    margin: 0 auto;
    flex-shrink: 0;
}

.top-labels {
    grid-column: 2 / 10;
    grid-row: 1 / 2;
    display: grid;
    grid-template-columns: repeat(8, 1fr);
}

.bottom-labels {
    grid-column: 2 / 10;
    grid-row: 10 / 11;
    display: grid;
    grid-template-columns: repeat(8, 1fr);
}

.left-labels {
    grid-column: 1 / 2;
    grid-row: 2 / 10;
    display: grid;
    grid-template-rows: repeat(8, 1fr);
}

.right-labels {
    grid-column: 10 / 11;
    grid-row: 2 / 10;
    display: grid;
    grid-template-rows: repeat(8, 1fr);
}

.file, .rank {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: var(--label-size);
    color: var(--label-color);
    user-select: none;
    opacity: 0.85;
    font-weight: 600;
}

.board {
    grid-column: 2 / 10;
    grid-row: 2 / 10;
    display: grid;
    width: fit-content;
    height:fit-content;
    grid-template-columns: repeat(8, var(--square-size));
    grid-template-rows: repeat(8, var(--square-size));
    border: var(--border) solid #333;
    border-radius: calc(var(--radius) * 0.75);
    overflow: hidden;
    gap: 0;
}

.grid-square {
    width: var(--square-size);
    height: var(--square-size);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: clamp(0.6rem, 1.5vw, 0.9rem);
    line-height: 1;
    user-select: none;
    position: relative;
    box-sizing: border-box;
}
.grid-square img {
    width: 45px;
    height: 45px;
}

.grid-square:hover {
    transform: scale(1.02);
}

.grid-square.light {
    background: var(--light);
}

.grid-square.light:hover {
    background-color: rgba(0, 0, 0, 0.2);
}

.grid-square.dark {
    background: var(--dark);
}

.grid-square.dark:hover {
    background-color: rgba(0, 0, 0, 0.2);
}

.grid-square.is-selected {
    background: #6af8fd;
}

.grid-square.color-blue {
    background: var(--blue) !important;
    color: #fff;
}

.grid-square.color-green {
    background: var(--green) !important;
    color: #222;
}

.grid-square.color-purple {
    background: var(--purple) !important;
    color: #222;
}

.grid-square.color-red {
    background: var(--red) !important;
    color: #fff;
}

.grid-square.color-gold {
    background: var(--gold) !important;
    color: #222;
}

.grid-square > .coord {
    position: absolute;
    bottom: 2px;
    left: 2px;
    font-size: clamp(0.5rem, 1vw, 0.7rem);
    opacity: 0.55;
}